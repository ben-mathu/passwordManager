// Generated by Dagger (https://dagger.dev).
package com.benatt.passwordsmanager.views;

import com.benatt.passwordsmanager.data.models.passwords.PasswordRepository;
import com.benatt.passwordsmanager.data.models.user.UserRepository;
import dagger.internal.Factory;
import javax.crypto.SecretKey;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<UserRepository> userRepoProvider;

  private final Provider<PasswordRepository> passwordRepoProvider;

  private final Provider<SecretKey> secretKeyProvider;

  public MainViewModel_Factory(Provider<UserRepository> userRepoProvider,
      Provider<PasswordRepository> passwordRepoProvider, Provider<SecretKey> secretKeyProvider) {
    this.userRepoProvider = userRepoProvider;
    this.passwordRepoProvider = passwordRepoProvider;
    this.secretKeyProvider = secretKeyProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(userRepoProvider.get(), passwordRepoProvider.get(), secretKeyProvider.get());
  }

  public static MainViewModel_Factory create(Provider<UserRepository> userRepoProvider,
      Provider<PasswordRepository> passwordRepoProvider, Provider<SecretKey> secretKeyProvider) {
    return new MainViewModel_Factory(userRepoProvider, passwordRepoProvider, secretKeyProvider);
  }

  public static MainViewModel newInstance(UserRepository userRepo, PasswordRepository passwordRepo,
      SecretKey secretKey) {
    return new MainViewModel(userRepo, passwordRepo, secretKey);
  }
}
