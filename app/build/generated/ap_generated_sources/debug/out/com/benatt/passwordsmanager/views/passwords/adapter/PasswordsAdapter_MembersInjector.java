// Generated by Dagger (https://dagger.dev).
package com.benatt.passwordsmanager.views.passwords.adapter;

import com.benatt.passwordsmanager.utils.ViewModelFactory;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PasswordsAdapter_MembersInjector implements MembersInjector<PasswordsAdapter> {
  private final Provider<ViewModelFactory> viewModelFactoryProvider;

  public PasswordsAdapter_MembersInjector(Provider<ViewModelFactory> viewModelFactoryProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static MembersInjector<PasswordsAdapter> create(
      Provider<ViewModelFactory> viewModelFactoryProvider) {
    return new PasswordsAdapter_MembersInjector(viewModelFactoryProvider);
  }

  @Override
  public void injectMembers(PasswordsAdapter instance) {
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.benatt.passwordmanager.views.passwords.adapter.PasswordsAdapter.viewModelFactory")
  public static void injectViewModelFactory(PasswordsAdapter instance,
      ViewModelFactory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
