// Generated by Dagger (https://dagger.dev).
package com.benatt.passwordsmanager.views.passwords;

import com.benatt.passwordsmanager.utils.ViewModelFactory;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PasswordsFragment_MembersInjector implements MembersInjector<PasswordsFragment> {
  private final Provider<ViewModelFactory> factoryProvider;

  public PasswordsFragment_MembersInjector(Provider<ViewModelFactory> factoryProvider) {
    this.factoryProvider = factoryProvider;
  }

  public static MembersInjector<PasswordsFragment> create(
      Provider<ViewModelFactory> factoryProvider) {
    return new PasswordsFragment_MembersInjector(factoryProvider);
  }

  @Override
  public void injectMembers(PasswordsFragment instance) {
    injectFactory(instance, factoryProvider.get());
  }

  @InjectedFieldSignature("com.benatt.passwordmanager.views.passwords.PasswordsFragment.factory")
  public static void injectFactory(PasswordsFragment instance, ViewModelFactory factory) {
    instance.factory = factory;
  }
}
