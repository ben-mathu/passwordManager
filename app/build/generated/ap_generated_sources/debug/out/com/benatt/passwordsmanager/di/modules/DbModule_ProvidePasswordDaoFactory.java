// Generated by Dagger (https://dagger.dev).
package com.benatt.passwordsmanager.di.modules;

import com.benatt.passwordsmanager.data.db.PasswordsDatabase;
import com.benatt.passwordsmanager.data.models.passwords.PasswordDao;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DbModule_ProvidePasswordDaoFactory implements Factory<PasswordDao> {
  private final DbModule module;

  private final Provider<PasswordsDatabase> passwordsDatabaseProvider;

  public DbModule_ProvidePasswordDaoFactory(DbModule module,
      Provider<PasswordsDatabase> passwordsDatabaseProvider) {
    this.module = module;
    this.passwordsDatabaseProvider = passwordsDatabaseProvider;
  }

  @Override
  public PasswordDao get() {
    return providePasswordDao(module, passwordsDatabaseProvider.get());
  }

  public static DbModule_ProvidePasswordDaoFactory create(DbModule module,
      Provider<PasswordsDatabase> passwordsDatabaseProvider) {
    return new DbModule_ProvidePasswordDaoFactory(module, passwordsDatabaseProvider);
  }

  public static PasswordDao providePasswordDao(DbModule instance,
      PasswordsDatabase passwordsDatabase) {
    return Preconditions.checkNotNullFromProvides(instance.providePasswordDao(passwordsDatabase));
  }
}
