// Generated by Dagger (https://dagger.dev).
package com.benatt.passwordsmanager.di;

import com.benatt.passwordsmanager.data.db.PasswordsDatabase;
import com.benatt.passwordsmanager.data.models.passwords.PasswordDao;
import com.benatt.passwordsmanager.data.models.passwords.PasswordRepository;
import com.benatt.passwordsmanager.data.models.user.UserRepository;
import com.benatt.passwordsmanager.di.modules.DbModule;
import com.benatt.passwordsmanager.di.modules.DbModule_ProvideDbFactory;
import com.benatt.passwordsmanager.di.modules.DbModule_ProvidePasswordDaoFactory;
import com.benatt.passwordsmanager.di.modules.KeyStoreModule;
import com.benatt.passwordsmanager.di.modules.KeyStoreModule_ProvideSecretKeyFactory;
import com.benatt.passwordsmanager.utils.ViewModelFactory;
import com.benatt.passwordsmanager.views.MainActivity;
import com.benatt.passwordsmanager.views.MainActivity_MembersInjector;
import com.benatt.passwordsmanager.views.addpassword.AddPasswordFragment;
import com.benatt.passwordsmanager.views.addpassword.AddPasswordFragment_MembersInjector;
import com.benatt.passwordsmanager.views.passwords.PasswordsFragment;
import com.benatt.passwordsmanager.views.passwords.PasswordsFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import javax.crypto.SecretKey;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerPasswordsComponent implements PasswordsComponent {
  private Provider<PasswordsDatabase> provideDbProvider;

  private Provider<PasswordDao> providePasswordDaoProvider;

  private Provider<SecretKey> provideSecretKeyProvider;

  private DaggerPasswordsComponent(DbModule dbModuleParam, KeyStoreModule keyStoreModuleParam) {

    initialize(dbModuleParam, keyStoreModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private PasswordRepository passwordRepository() {
    return new PasswordRepository(providePasswordDaoProvider.get());
  }

  private ViewModelFactory viewModelFactory() {
    return new ViewModelFactory(passwordRepository(), new UserRepository(), provideSecretKeyProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final DbModule dbModuleParam, final KeyStoreModule keyStoreModuleParam) {
    this.provideDbProvider = DoubleCheck.provider(DbModule_ProvideDbFactory.create(dbModuleParam));
    this.providePasswordDaoProvider = SingleCheck.provider(DbModule_ProvidePasswordDaoFactory.create(dbModuleParam, provideDbProvider));
    this.provideSecretKeyProvider = DoubleCheck.provider(KeyStoreModule_ProvideSecretKeyFactory.create(keyStoreModuleParam));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void inject(PasswordsFragment passwordsFragment) {
    injectPasswordsFragment(passwordsFragment);
  }

  @Override
  public void inject(AddPasswordFragment addPasswordFragment) {
    injectAddPasswordFragment(addPasswordFragment);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    return instance;
  }

  private PasswordsFragment injectPasswordsFragment(PasswordsFragment instance) {
    PasswordsFragment_MembersInjector.injectFactory(instance, viewModelFactory());
    return instance;
  }

  private AddPasswordFragment injectAddPasswordFragment(AddPasswordFragment instance) {
    AddPasswordFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    return instance;
  }

  public static final class Builder {
    private DbModule dbModule;

    private KeyStoreModule keyStoreModule;

    private Builder() {
    }

    public Builder dbModule(DbModule dbModule) {
      this.dbModule = Preconditions.checkNotNull(dbModule);
      return this;
    }

    public Builder keyStoreModule(KeyStoreModule keyStoreModule) {
      this.keyStoreModule = Preconditions.checkNotNull(keyStoreModule);
      return this;
    }

    public PasswordsComponent build() {
      Preconditions.checkBuilderRequirement(dbModule, DbModule.class);
      if (keyStoreModule == null) {
        this.keyStoreModule = new KeyStoreModule();
      }
      return new DaggerPasswordsComponent(dbModule, keyStoreModule);
    }
  }
}
