// Generated by Dagger (https://dagger.dev).
package com.benatt.passwordsmanager.views.addpassword;

import com.benatt.passwordsmanager.data.models.passwords.PasswordRepository;
import dagger.internal.Factory;
import javax.crypto.SecretKey;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddPasswordViewModel_Factory implements Factory<AddPasswordViewModel> {
  private final Provider<SecretKey> secretKeyProvider;

  private final Provider<PasswordRepository> passwordRepositoryProvider;

  public AddPasswordViewModel_Factory(Provider<SecretKey> secretKeyProvider,
      Provider<PasswordRepository> passwordRepositoryProvider) {
    this.secretKeyProvider = secretKeyProvider;
    this.passwordRepositoryProvider = passwordRepositoryProvider;
  }

  @Override
  public AddPasswordViewModel get() {
    return newInstance(secretKeyProvider.get(), passwordRepositoryProvider.get());
  }

  public static AddPasswordViewModel_Factory create(Provider<SecretKey> secretKeyProvider,
      Provider<PasswordRepository> passwordRepositoryProvider) {
    return new AddPasswordViewModel_Factory(secretKeyProvider, passwordRepositoryProvider);
  }

  public static AddPasswordViewModel newInstance(SecretKey secretKey,
      PasswordRepository passwordRepository) {
    return new AddPasswordViewModel(secretKey, passwordRepository);
  }
}
